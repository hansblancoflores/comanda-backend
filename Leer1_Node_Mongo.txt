# GU√çA COMPLETA: Node.js + MongoDB Atlas desde cero

#########################################################
# 1. INSTALAR NODE.JS Y NPM
#########################################################

# - Ve a https://nodejs.org/
# - Descarga la versi√≥n LTS (recomendada para la mayor√≠a de los usuarios).
# - Ejecuta el instalador y sigue los pasos.
# - Al terminar, abre el CMD (ver siguiente secci√≥n) y verifica la instalaci√≥n:
#
#   node -v
#   npm -v
#
# Deber√≠as ver los n√∫meros de versi√≥n de Node y npm.

#########################################################
# 2. ABRIR LA TERMINAL (CMD) Y NAVEGAR A TU CARPETA
#########################################################

# - Pulsa la tecla Windows, escribe "cmd" y presiona Enter.
# - Para cambiar al disco D, escribe:
#
#   D:
#
# - Para entrar a tu carpeta de proyecto, escribe:
#
#   cd \Apps\ChickenFlores\comanda
#
# - Ahora tu terminal debe mostrar:
#
#   D:\Apps\ChickenFlores\comanda>
#
# (Esto es el s√≠mbolo del sistema de Windows, conocido como CMD).

#########################################################
# 3. INICIALIZAR EL PROYECTO NODE.JS
#########################################################

# Ejecuta:
npm init -y

# Esto crea el archivo package.json con la configuraci√≥n b√°sica.

#########################################################
# 4. INSTALAR DEPENDENCIAS NECESARIAS
#########################################################

# Ejecuta:
npm install express mongoose cors dotenv

# Estas librer√≠as permiten crear el servidor, conectar a MongoDB y gestionar variables de entorno.

#########################################################
# 5. CREAR EL ARCHIVO DE VARIABLES DE ENTORNO (.env)
#########################################################

# - En el Explorador de archivos, ve a D:\Apps\ChickenFlores\comanda
# - Crea un archivo llamado exactamente: .env
# - El contenido debe ser (sin espacios, sin comillas):
#
#   MONGO_URL=mongodb+srv://USUARIO:CLAVE@cluster0.owffiaw.mongodb.net/chickenflores?retryWrites=true&w=majority
#
# IMPORTANTE:
# - Si tu contrase√±a tiene el car√°cter @, debes reemplazar cada @ por %40.
#   Ejemplo: Si tu contrase√±a es Hh945050@@@@ debes poner Hh945050%40%40%40%40
#   en la URL.
# - Otros caracteres especiales tambi√©n deben codificarse (consulta "URL encode" online).

#########################################################
# 6. CREAR LA CARPETA DE CONFIGURACI√ìN Y EL ARCHIVO DE CONEXI√ìN
#########################################################

# En el CMD, ejecuta:
mkdir config

# Luego, en la carpeta config, crea un archivo llamado db.js con este contenido:

/*
 * config/db.js
 * Conexi√≥n a MongoDB Atlas usando Mongoose.
 */
const mongoose = require('mongoose');

const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGO_URL); // Opciones extra ya no son necesarias
    console.log('‚úÖ MongoDB Connected');
  } catch (error) {
    console.error('‚ùå MongoDB connection error:', error.message);
    process.exit(1);
  }
};

module.exports = connectDB;

#########################################################
# 7. CREAR EL ARCHIVO PRINCIPAL DEL SERVIDOR
#########################################################

# En la carpeta principal (comanda), crea server.js con este contenido:

/*
 * server.js
 * Servidor principal Express + conexi√≥n a MongoDB.
 */
require('dotenv').config(); // Cargar variables de entorno
const express = require('express');
const cors = require('cors');
const connectDB = require('./config/db');

const app = express();
app.use(cors());
app.use(express.json());

// Conectar a MongoDB
connectDB();

app.get('/', (req, res) => {
  res.send('API funcionando correctamente');
});

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`üöÄ Servidor corriendo en puerto ${PORT}`));

#########################################################
# 8. INICIAR EL SERVIDOR Y PROBAR LA CONEXI√ìN
#########################################################

# - En el CMD, aseg√∫rate de estar en D:\Apps\ChickenFlores\comanda
# - Ejecuta:
node server.js

# - Si todo est√° bien, ver√°s:
#   üöÄ Servidor corriendo en puerto 5000
#   ‚úÖ MongoDB Connected
#
# - Abre tu navegador y visita http://localhost:5000/
#   Debes ver: API funcionando correctamente

#########################################################
# 9. NOTAS Y RECOMENDACIONES
#########################################################

# - Si ves errores de conexi√≥n, verifica:
#   - El archivo .env est√° en la carpeta correcta y bien nombrado.
#   - La variable se llama exactamente MONGO_URL.
#   - La contrase√±a est√° correctamente codificada si tiene caracteres especiales.
#   - El servidor se reinicia despu√©s de cualquier cambio en .env.
#
# - Si ves advertencias sobre "useNewUrlParser" o "useUnifiedTopology", simplemente elimina esas opciones del c√≥digo, ya no son necesarias en Mongoose moderno.
#
# - Para cualquier otro error, revisa los mensajes en la terminal y aseg√∫rate de que todos los nombres de archivos y rutas sean correctos.

#########################################################
# 10. REFERENCIAS
#########################################################

# - Documentaci√≥n oficial de Node.js: https://nodejs.org/
# - Documentaci√≥n oficial de MongoDB Atlas: https://www.mongodb.com/docs/atlas/
# - Documentaci√≥n oficial de Mongoose: https://mongoosejs.com/docs/
# - Documentaci√≥n oficial de dotenv: https://www.npmjs.com/package/dotenv

#########################################################
# FIN DE LA GU√çA
#########################################################
